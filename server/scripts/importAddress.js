import mongoose from "mongoose";
import fs from "fs";
import path from "path";
import dotenv from "dotenv";
import Unit from "../models/Unit.js"; // üëâ d√πng model Unit thay v√¨ Address
dotenv.config();

const __dirname = path.resolve();
const dataPath = path.join(__dirname, "data/full-address.json");

/**
 * üîÅ ƒê·ªá quy t√°ch d·ªØ li·ªáu ƒëa c·∫•p (province ‚Üí district ‚Üí commune)
 */
function flattenUnits(data, parentCode = null, level = "province") {
  const flat = [];

  data.forEach(item => {
    const { name, code, boundary, districts, communes } = item;

    // Ghi b·∫£n ghi hi·ªán t·∫°i
    flat.push({
      name: name?.replace(/^T·ªânh |^Th√†nh ph·ªë /i, "").trim(),
      code,
      level,
      parentCode,
      boundary: boundary || null,
      createdAt: new Date(),
      updatedAt: new Date(),
      history: []
    });

    // N·∫øu c√≥ danh s√°ch huy·ªán
    if (districts?.length) {
      flat.push(...flattenUnits(districts, code, "district"));
    }

    // N·∫øu c√≥ danh s√°ch x√£
    if (communes?.length) {
      flat.push(...flattenUnits(communes, code, "commune"));
    }
  });

  return flat;
}

/**
 * üöÄ Import d·ªØ li·ªáu v√†o MongoDB
 */
async function importData() {
  try {
    await mongoose.connect(
      process.env.MONGO_URI || "mongodb://127.0.0.1:27017/administrative_boundaries"
    );
    console.log("‚úÖ MongoDB connected");

    // ƒê·ªçc d·ªØ li·ªáu
    const text = fs.readFileSync(dataPath, "utf8");
    const raw = JSON.parse(text);

    // L√†m ph·∫≥ng d·ªØ li·ªáu
    const flattened = flattenUnits(raw);
    console.log(`üì¶ Found ${flattened.length} administrative units`);

    // X√≥a d·ªØ li·ªáu c≈©
    await Unit.deleteMany({});
    console.log("üßπ Old data cleared.");

    // Ghi d·ªØ li·ªáu m·ªõi
    await Unit.insertMany(flattened);
    console.log("‚úÖ Import completed successfully!");
  } catch (err) {
    console.error("‚ùå Error importing:", err);
  } finally {
    await mongoose.connection.close();
  }
}

importData();
