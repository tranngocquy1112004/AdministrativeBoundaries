import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import Unit from "../models/Unit.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const filePath = path.join(__dirname, "../../data/full-address.json");

// üîπ H√†m chu·∫©n h√≥a chu·ªói
function normalize(str) {
  return str
    ?.normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/T·ªânh|Th√†nh ph·ªë|Ph∆∞·ªùng|X√£|Th·ªã tr·∫•n/gi, "")
    .trim()
    .toLowerCase();
}

export async function convertAddress(req, res) {
  try {
    const { address } = req.body;
    if (!address)
      return res.status(400).json({ error: "Thi·∫øu ƒë·ªãa ch·ªâ c·∫ßn chuy·ªÉn ƒë·ªïi" });

    const parts = address.split(",").map((p) => p.trim());
    if (parts.length < 2)
      return res
        .status(400)
        .json({ error: "ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 2 c·∫•p (T·ªânh, X√£/Ph∆∞·ªùng)" });

    const [provinceName, communeName] = parts;
    const provinceNorm = normalize(provinceName);
    const communeNorm = normalize(communeName);

    console.log("üß© Nh·∫≠n ƒë·ªãa ch·ªâ:", address);

    // ---------------------------
    // 1Ô∏è‚É£ ∆ØU TI√äN L·∫§Y T·ª™ MONGO
    // ---------------------------
    let province = await Unit.findOne({
      name: { $regex: provinceName.replace(/T·ªânh|Th√†nh ph·ªë/gi, "").trim(), $options: "i" },
      level: "province",
    });

    let commune = null;
    if (province) {
      commune = await Unit.findOne({
        name: { $regex: communeName.replace(/Ph∆∞·ªùng|X√£|Th·ªã tr·∫•n/gi, "").trim(), $options: "i" },
        level: "commune",
        parentCode: province.code,
      });
    }

    // ---------------------------
    // 2Ô∏è‚É£ FALLBACK QUA FILE JSON
    // ---------------------------
    if (!province || !commune) {
      console.warn("‚ö†Ô∏è Fallback JSON ‚Üí Searching locally");
      const rawData = fs.readFileSync(filePath, "utf8");
      const provinces = JSON.parse(rawData);

      province =
        province ||
        provinces.find((p) =>
          new RegExp(provinceName.replace(/T·ªânh|Th√†nh ph·ªë/gi, "").trim(), "i").test(p.name)
        );

      if (province && Array.isArray(province.communes)) {
        commune =
          commune ||
          province.communes.find((c) =>
            new RegExp(communeName.replace(/Ph∆∞·ªùng|X√£|Th·ªã tr·∫•n/gi, "").trim(), "i").test(c.name)
          );
      }
    }

    // ---------------------------
    // 3Ô∏è‚É£ TR·∫¢ K·∫æT QU·∫¢
    // ---------------------------
    return res.json({
      original: address,
      matched: {
        province: province?.name || null,
        commune: commune?.name || null,
      },
      codes: {
        province: province?.code || null,
        commune: commune?.code || null,
      },
      found: !!(province && commune),
    });
  } catch (err) {
    console.error("‚ùå Convert Error:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
}
