import fetch from "node-fetch";
import fs from "fs";
import path from "path";
import dotenv from "dotenv";
import { logInfo, logError } from "../utils/logger.js";

dotenv.config();
const API_BASE = process.env.API_BASE || "https://production.cas.so/address-kit";
const EFFECTIVE_DATE = process.env.EFFECTIVE_DATE || "latest";
const DATA_PATH = path.resolve("data/full-address.json");

// L·∫•y danh s√°ch t·ªânh
async function fetchProvinces() {
  const url = `${API_BASE}/${EFFECTIVE_DATE}/provinces`;
  const res = await fetch(url);
  if (!res.ok) throw new Error(`L·ªói fetch provinces: ${res.status}`);
  const data = await res.json();
  logInfo(`‚úÖ L·∫•y ${data.provinces.length} t·ªânh/th√†nh`);
  return data.provinces;
}

// L·∫•y x√£ theo t·ª´ng t·ªânh
async function fetchCommunesByProvince(provinceCode) {
  const url = `${API_BASE}/${EFFECTIVE_DATE}/provinces/${provinceCode}/communes`;
  const res = await fetch(url);
  if (!res.ok) throw new Error(`L·ªói fetch communes c·ªßa t·ªânh ${provinceCode}`);
  const data = await res.json();
  return data.communes || [];
}

// H√†m ch√≠nh ƒë·ªÉ fetch to√†n b·ªô d·ªØ li·ªáu h√†nh ch√≠nh
export async function fetchAllData() {
  try {
    logInfo("üîÅ B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu h√†nh ch√≠nh...");
    const provinces = await fetchProvinces();

    const allData = [];
    for (const province of provinces) {
      const communes = await fetchCommunesByProvince(province.code);
      allData.push({ ...province, communes });
    }

    fs.writeFileSync(DATA_PATH, JSON.stringify(allData, null, 2), "utf8");
    logInfo(`üíæ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o ${DATA_PATH}`);
  } catch (err) {
    logError("‚ùå L·ªói khi fetch d·ªØ li·ªáu:", err.message);
  }
}

// N·∫øu ch·∫°y tr·ª±c ti·∫øp: node fetcher/index.js
if (process.argv[1].includes("index.js")) {
  fetchAllData();
}
